name: Run tests

on:
  push:
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: tests
  cancel-in-progress: true

env:
  POSTGRES_PORT: 5432
  POSTGRES_PASSWORD: root
  TEMP_DIR: temp
  ODBC_WIN_POSTGRES: https://ftp.postgresql.org/pub/odbc/versions/msi/psqlodbc_16_00_0000-x64.zip

jobs:

  # Run tests
  test:
    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.11"]
        
    steps:
      
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pip install poetry==1.7.1

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      # setup python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      
      # verify python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      # create venv and install dependencies
      - name: Install dependencies
        run: poetry install --with test

      - name: Setup postgres
        run: |
          # start server
          & "$env:PGBIN\pg_ctl.exe" start -D "$env:PGDATA"
          & "$env:PGBIN\pg_ctl.exe" status -D "$env:PGDATA"
      
      - name: Create temp directory
        run: New-Item -ItemType "directory" -Path . -Name "${{ env.TEMP_DIR }}"

      - name: Create download hash
        id: odbc-win-postgres-hash
        run: echo "HASH=$(python -c "import hashlib; print(hashlib.sha256(b'${{ env.ODBC_WIN_POSTGRES }}').hexdigest())")" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Load cached postgres ODBC download
        id: cached-installer-odbc-postgres
        uses: actions/cache@v3
        with:
          path: ${{ env.TEMP_DIR }}/psqlodbc.zip
          key: odbc-${{ runner.os }}-postgres-${{ steps.odbc-win-postgres-hash.outputs.HASH }}

      - name: Download ODBC postgres driver
        run: |
          $downloadUrl = "${{ env.ODBC_WIN_POSTGRES }}"
          $downloadPath = "${{ env.TEMP_DIR }}\psqlodbc.zip"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath
        if: steps.cached-installer-odbc-postgres.outputs.cache-hit != 'true'

      - name: Install postgres ODBC driver
        run: |
          $downloadPath = "${{ env.TEMP_DIR }}\psqlodbc.zip"
          # extract psqlodbc installer
          $extractPath = "$env:TEMP\psqlodbc"
          Expand-Archive -Path $downloadPath -DestinationPath $extractPath -Force
          # run psqlodbc installer
          $installerPath = "$env:TEMP\psqlodbc\psqlodbc_x64.msi"
          Start-Process -FilePath $installerPath -ArgumentList "/quiet","/passive" -Wait
          # remove downloads
          if (Test-Path $extractPath) { Remove-Item $extractPath -Force -Recurse } else { Write-Host "Item $extractPath does not exist" }
          if (Test-Path $downloadPath) { Remove-Item $downloadPath -Force } else { Write-Host "Item $downloadPath does not exist" }

      - name: Install Access Database Engine
        run: |
          $downloadUrl = "https://download.microsoft.com/download/2/4/3/24375141-E08D-4803-AB0E-10F2E3A07AAA/AccessDatabaseEngine_X64.exe"
          $installerPath = "$env:TEMP\accessdatabaseengine.exe"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
          Start-Process -FilePath $installerPath -ArgumentList "/quiet","/passive" -Wait
          Remove-Item $installerPath -Force

      - name: Display ODBC drivers
        run: Get-OdbcDriver
      
      - name: Display ODBC DSNs
        run: Get-OdbcDsn

      - name: Run tests
        continue-on-error: true
        run: poetry run pytest

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: reports
  
  # Create assets
  assets:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    env:
      BRANCH: assets
    steps:
      
      - name: Set up Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Clone assets branch
        run: |
          git clone -b ${{ env.BRANCH }} https://github.com/${{ github.repository }} .

      - name: Install genbadge
        run: pip install genbadge[tests,coverage]

      - uses: actions/download-artifact@v3
        with:
          name: test-reports

      - name: Generate badges
        run: |
          genbadge tests -o assets/badges/tests-badge.svg
          genbadge coverage -o assets/badges/coverage-badge.svg
      
      - name: Commit and push badges
        run: |
          gid add assets
          git commit -m "Created assets"
          git push origin ${{ env.BRANCH }}